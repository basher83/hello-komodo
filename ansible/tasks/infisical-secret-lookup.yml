---
# Reusable task for Infisical secret lookups with proper security patterns
# Usage:
#   - name: Get Vault token
#     ansible.builtin.include_tasks: "{{ playbook_dir }}/../../../tasks/infisical-secret-lookup.yml"
#     vars:
#       secret_name: 'VAULT_PROD_ROOT_TOKEN'
#       secret_var_name: 'vault_token'
#       fallback_env_var: 'VAULT_TOKEN'  # Optional
#       infisical_path: '/apollo-13/vault'  # Optional, defaults to /apollo-13/vault
#       infisical_env: 'prod'  # Optional, defaults to prod
#       allow_empty: false  # Optional, whether to allow empty values

- name: "infisical-secret-lookup | Validate required variables for Infisical lookup"
  ansible.builtin.assert:
    that:
      - secret_name is defined and secret_name|trim|length > 0
      - secret_var_name is defined and secret_var_name|trim|length > 0
    fail_msg: "secret_name and secret_var_name must be provided and non-empty"
    quiet: true
  no_log: true
  run_once: true
  delegate_to: localhost
  tags: [secrets, infisical]


- name: "infisical-secret-lookup | Validate Infisical authentication availability"
  ansible.builtin.assert:
    that:
      - ( (lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_ID') | default('') | length > 0) and (lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET') |
        default('') | length > 0) ) or ( (fallback_env_var is defined) and (lookup('env', fallback_env_var) | default('') | length > 0) )
    fail_msg: |
      ❌ Missing Infisical authentication credentials!

      Required: Set both environment variables:
        - INFISICAL_UNIVERSAL_AUTH_CLIENT_ID
        - INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET

      OR provide fallback_env_var that points to a non-empty, existing environment variable.

      Current fallback_env_var: {{ fallback_env_var | default('(none)') }}
    success_msg: "✅ Infisical authentication credentials available"
  no_log: true
  run_once: true
  delegate_to: localhost
  tags: [secrets, infisical]
- name: "infisical-secret-lookup | Retrieve secret from Infisical"
  ansible.builtin.set_fact:
    "{{ secret_var_name }}": >-
      {%- if fallback_env_var is defined -%}
        {{ lookup('env', fallback_env_var) | default(
            lookup('infisical.vault.read_secrets',
              universal_auth_client_id=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_ID'),
              universal_auth_client_secret=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET'),
              project_id=infisical_project_id | default('7b832220-24c0-45bc-a5f1-ce9794a31259'),
              env_slug=infisical_env | default('prod'),
              path=infisical_path | default('/komodo'),
              secret_name=secret_name).value,
            true
          ) }}
      {%- else -%}
        {{ lookup('infisical.vault.read_secrets',
            universal_auth_client_id=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_ID'),
            universal_auth_client_secret=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET'),
            project_id=infisical_project_id | default('7b832220-24c0-45bc-a5f1-ce9794a31259'),
            env_slug=infisical_env | default('prod'),
            path=infisical_path | default('/komodo'),
            secret_name=secret_name).value | default('' if (allow_empty | default(false)) else omit) }}
      {%- endif -%}
    cacheable: false
  no_log: true
  run_once: true
  delegate_to: localhost
  tags: [secrets, infisical]

- name: "infisical-secret-lookup | Validate secret retrieval"
  ansible.builtin.assert:
    that:
      - hostvars[inventory_hostname][secret_var_name] is defined
      - (allow_empty | default(false)) or ((hostvars[inventory_hostname][secret_var_name] | default('')) | length > 0)
    fail_msg: >-
      Failed to retrieve {{ secret_name }} from Infisical
      or environment variable {{ fallback_env_var | default('(none)') }}
    quiet: true
  no_log: true
  run_once: true
  tags: [secrets, infisical]
