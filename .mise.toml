[settings]
auto_install = true
not_found_auto_install = true
task_run_auto_install = true

[tools]
pre-commit = "4.3.0"
actionlint = "latest"
markdownlint-cli2 = "0.18.1"
rg = "14.1.1"
fd = "10.2.0"
eza = "0.23.0"
yamllint = "1.37.1"
yamlfmt = "0.17.2"
python = "3.13.7"
git-cliff = "2.10.1"
node = "latest"

[env]
_.python.venv = { path = ".venv", create = true } # create the venv if it doesn't exist

# ============================================================================
# PRE-COMMIT HOOK TASKS
# ============================================================================

# Install git pre-commit hooks for automated checks
[tasks.hooks-install]
description = "Install pre-commit hooks for automated validation"
run = "pre-commit install"

# Manually run all pre-commit hooks against all files
[tasks.hooks-run]
description = "Run pre-commit hooks on all files (manual check)"
run = "pre-commit run --all-files"

# ============================================================================
# INFISICAL SECRET SCANNING TASKS
# ============================================================================

# Initialize Infisical for secret scanning and management
# Creates .infisical.json, baseline scan, and installs pre-commit hook
[tasks.infisical-init]
description = "Initialize Infisical configuration, create baseline, and install pre-commit hook"
run = """
# Check if .infisical.json already exists
if [ -f .infisical.json ]; then
  echo "⚠️  .infisical.json already exists!"
  echo "Current configuration:"
  cat .infisical.json | head -5
  echo "..."
  read -p "Do you want to overwrite it? (y/N): " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "❌ Skipping .infisical.json creation"
  else
    echo "📝 Overwriting .infisical.json with project configuration..."
    cat > .infisical.json << 'EOF'
{
  "workspaceId": "7b832220-24c0-45bc-a5f1-ce9794a31259",
  "defaultEnvironment": "production",
  "gitBranchToEnvironmentMapping": {
    "main": "production",
    "develop": "development",
    "staging": "staging",
    "feature/*": "development"
  }
}
EOF
    echo "✅ Updated .infisical.json"
  fi
else
  echo "📝 Creating .infisical.json with project configuration..."
  cat > .infisical.json << 'EOF'
{
  "workspaceId": "7b832220-24c0-45bc-a5f1-ce9794a31259",
  "defaultEnvironment": "production",
  "gitBranchToEnvironmentMapping": {
    "main": "production",
    "develop": "development",
    "staging": "staging",
    "feature/*": "development"
  }
}
EOF
  echo "✅ Created .infisical.json"
fi

# Check if baseline exists
if [ -f .infisical-baseline.json ]; then
  echo "⚠️  .infisical-baseline.json already exists!"
  read -p "Do you want to regenerate the baseline? (y/N): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "🔍 Regenerating baseline scan..."
    infisical scan --report-path=.infisical-baseline.json
    echo "✅ Regenerated .infisical-baseline.json"
  else
    echo "✔️  Using existing baseline"
  fi
else
  echo "🔍 Creating baseline scan..."
  infisical scan --report-path=.infisical-baseline.json
  echo "✅ Created .infisical-baseline.json"
fi

echo "🪝 Installing/updating pre-commit hook..."
infisical scan install --pre-commit-hook
echo "✅ Installed Infisical pre-commit hook"

echo "🎉 Infisical setup complete!"
"""

# Run secret scanning with baseline to reduce false positives
[tasks.infisical-scan]
description = "Scan repository for secrets using baseline for known false positives"
run = "infisical scan --baseline-path=.infisical-baseline.json"

# Update the baseline with current scan results (use when adding new false positives)
[tasks.infisical-baseline-update]
description = "Update the Infisical baseline with current scan results"
run = """
echo "🔍 Updating baseline scan..."
infisical scan --report-path=.infisical-baseline.json
echo "✅ Updated .infisical-baseline.json"
echo "⚠️  Review the baseline file to ensure no real secrets were added!"
"""

# ============================================================================
# Linting
# ============================================================================

# Lint YAML files for syntax and style
[tasks.yaml-lint]
description = "Lint all YAML files for syntax and style issues"
dir = "ansible"
run = "yamllint ."

[tasks.ansible-lint]
description = "Lint Ansible"
dir = "ansible"
run = "ansible-lint"

# Lint Markdown files for style consistency
[tasks.markdown-lint]
description = "Lint all Markdown files for style consistency"
run = "markdownlint-cli2 --config .markdownlint-cli2.yaml '**/*.md'"

[tasks.changelog]
description = "Update changelog using git-cliff"
run = "git-cliff -o CHANGELOG.md"

[tasks.ansible-setup]
description = "Set up Ansible environment and install dependencies"
dir = "ansible"
run = "ansible-galaxy collection install -r requirements.yml"

[tasks.ansible-ping]
description = "Test Ansible connectivity to all hosts"
dir = "ansible"
run = "ansible all -m ping -i inventory/all.yml"
